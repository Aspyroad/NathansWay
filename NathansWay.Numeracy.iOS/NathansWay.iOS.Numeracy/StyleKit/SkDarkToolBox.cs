//
//  SkDarkToolBox.cs
//  NathansWay.iOS.Numeracy.Graphics
//
//  Created by Brett Anthony on 13/10/2014.
//  Copyright (c) 2014 AspyRoad Software. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreGraphics;

namespace NathansWay.iOS.Numeracy.Graphics
{
    [Register ("SkDarkToolBox")]
    public class SkDarkToolBox : NSObject
    {

        //// Initialization

        static SkDarkToolBox()
        {
            var colorSpace = CGColorSpace.CreateDeviceRGB();

            // Colors Initialization
            ColorTextGradient = UIColor.FromRGBA(1.000f, 1.000f, 1.000f, 0.780f);
            ColorGradientButtonMainStart = UIColor.FromRGBA(0.000f, 0.000f, 0.000f, 1.000f);
            ColorGradientButtonTap = SkDarkToolBox.ColorGradientButtonMainStart.ColorWithAlpha(0.7f);
            ColorGradientButtonMainEnd = UIColor.FromRGBA(0.000f, 0.000f, 0.000f, 0.702f);
            StrokeBorder = UIColor.FromRGBA(0.574f, 0.346f, 0.093f, 0.829f);
            ColorMainImage = UIColor.FromRGBA(0.647f, 0.388f, 0.063f, 1.000f);
            ColorImageBlade = UIColor.FromRGBA(0.688f, 0.714f, 0.732f, 1.000f);
            ColorImageWrench = UIColor.FromRGBA(0.515f, 0.582f, 0.585f, 1.000f);

            // Gradients Initialization
            var gradientButtonMainColors = new CGColor [] {SkDarkToolBox.ColorGradientButtonMainStart.CGColor, UIColor.FromRGBA(0.000f, 0.000f, 0.000f, 0.851f).CGColor, SkDarkToolBox.ColorGradientButtonMainEnd.CGColor};
            var gradientButtonMainLocations = new float [] {0.27f, 0.51f, 0.95f};
            GradientButtonMain = new CGGradient(colorSpace, gradientButtonMainColors, gradientButtonMainLocations);

            // Shadows Initialization
            ShadowTextTitle = new NSShadow { ShadowColor = SkDarkToolBox.ColorGradientButtonMainStart, ShadowOffset = new SizeF(2.1f, -3.1f), ShadowBlurRadius = 5.0f };

        }

        //// Colors

        public static UIColor ColorTextGradient { get; private set; }
        public static UIColor ColorGradientButtonMainStart { get; private set; }
        public static UIColor ColorGradientButtonMainEnd { get; private set; }
        public static UIColor StrokeBorder { get; private set; }
        public static UIColor ColorMainImage { get; private set; }
        public static UIColor ColorGradientButtonTap { get; private set; }
        public static UIColor ColorImageBlade { get; private set; }
        public static UIColor ColorImageWrench { get; private set; }

        //// Gradients

        public static CGGradient GradientButtonMain { get; private set; }

        //// Shadows

        public static NSShadow ShadowTextTitle { get; private set; }

        //// Drawing Methods

        public static void DrawCanvas1(RectangleF frame, bool isTapped)
        {
            //// General Declarations
            var colorSpace = CGColorSpace.CreateDeviceRGB();
            var context = UIGraphics.GetCurrentContext();


            //// Variable Declarations
            var colorWhenTapped = isTapped ? new CGGradient(colorSpace, new CGColor [] {SkDarkToolBox.ColorGradientButtonMainEnd.CGColor, SkDarkToolBox.ColorGradientButtonMainStart.CGColor}) : new CGGradient(colorSpace, new CGColor [] {SkDarkToolBox.ColorGradientButtonMainStart.CGColor, SkDarkToolBox.ColorGradientButtonMainEnd.CGColor});

            //// BackGroundWhite Drawing
            var backGroundWhitePath = UIBezierPath.FromRoundedRect(new RectangleF(3.5f, 0.5f, 446.0f, 148.0f), 24.0f);
            UIColor.White.SetFill();
            backGroundWhitePath.Fill();
            UIColor.White.SetStroke();
            backGroundWhitePath.LineWidth = 1.0f;
            backGroundWhitePath.Stroke();


            //// MainSurfaceRectangle Drawing
            var mainSurfaceRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(3.0f, 0.0f, 448.0f, 150.0f), 24.0f);
            context.SaveState();
            mainSurfaceRectanglePath.AddClip();
            context.DrawLinearGradient(colorWhenTapped,
                new PointF(213.24f, 155.92f),
                new PointF(227.0f, 0.0f),
                CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);
            context.RestoreState();


            //// ToolBox Drawing
            RectangleF toolBoxRect = new RectangleF(136.0f, 0.0f, 146.0f, 64.0f);
            context.SaveState();
            context.SetShadowWithColor(SkDarkToolBox.ShadowTextTitle.ShadowOffset, SkDarkToolBox.ShadowTextTitle.ShadowBlurRadius, SkDarkToolBox.ShadowTextTitle.ShadowColor.CGColor);
            SkDarkToolBox.ColorTextGradient.SetFill();
            new NSString("ToolBox\n").DrawString(RectangleF.Inflate(toolBoxRect, 0.0f, -7.0f), UIFont.FromName("GillSans-Light", 40.0f), UILineBreakMode.WordWrap, UITextAlignment.Center);
            context.RestoreState();



            //// Groups
            {
                context.SaveState();
                context.SetShadowWithColor(SkDarkToolBox.ShadowTextTitle.ShadowOffset, SkDarkToolBox.ShadowTextTitle.ShadowBlurRadius, SkDarkToolBox.ShadowTextTitle.ShadowColor.CGColor);
                context.BeginTransparencyLayer();


                //// ToolImage
                {
                    //// Bezier 4 Drawing
                    UIBezierPath bezier4Path = new UIBezierPath();
                    bezier4Path.MoveTo(new PointF(48.8f, 15.66f));
                    bezier4Path.AddCurveToPoint(new PointF(71.89f, 24.01f), new PointF(57.09f, 15.1f), new PointF(65.53f, 17.89f));
                    bezier4Path.AddCurveToPoint(new PointF(79.43f, 50.75f), new PointF(79.65f, 31.25f), new PointF(82.06f, 41.28f));
                    bezier4Path.AddLineTo(new PointF(134.79f, 103.11f));
                    bezier4Path.AddCurveToPoint(new PointF(134.79f, 123.16f), new PointF(140.58f, 108.68f), new PointF(140.58f, 117.59f));
                    bezier4Path.AddCurveToPoint(new PointF(113.82f, 123.16f), new PointF(129.0f, 128.73f), new PointF(119.62f, 128.73f));
                    bezier4Path.AddLineTo(new PointF(58.46f, 70.8f));
                    bezier4Path.AddCurveToPoint(new PointF(29.96f, 63.56f), new PointF(48.58f, 73.03f), new PointF(37.71f, 70.8f));
                    bezier4Path.AddCurveToPoint(new PointF(21.61f, 41.84f), new PointF(23.6f, 57.43f), new PointF(20.94f, 49.64f));
                    bezier4Path.AddLineTo(new PointF(24.72f, 38.49f));
                    bezier4Path.AddLineTo(new PointF(45.68f, 58.55f));
                    bezier4Path.AddLineTo(new PointF(61.41f, 53.53f));
                    bezier4Path.AddLineTo(new PointF(66.65f, 38.49f));
                    bezier4Path.AddLineTo(new PointF(45.68f, 19.0f));
                    bezier4Path.AddLineTo(new PointF(48.8f, 15.66f));
                    bezier4Path.ClosePath();
                    bezier4Path.MoveTo(new PointF(119.07f, 108.12f));
                    bezier4Path.AddCurveToPoint(new PointF(119.07f, 118.15f), new PointF(116.17f, 110.91f), new PointF(116.17f, 115.36f));
                    bezier4Path.AddCurveToPoint(new PointF(129.55f, 118.15f), new PointF(121.96f, 120.93f), new PointF(126.65f, 120.93f));
                    bezier4Path.AddCurveToPoint(new PointF(129.55f, 108.12f), new PointF(132.44f, 115.36f), new PointF(132.44f, 110.91f));
                    bezier4Path.AddCurveToPoint(new PointF(119.07f, 108.12f), new PointF(126.65f, 105.34f), new PointF(121.96f, 105.34f));
                    bezier4Path.ClosePath();
                    bezier4Path.MiterLimit = 4.0f;

                    SkDarkToolBox.ColorImageWrench.SetFill();
                    bezier4Path.Fill();


                    //// Bezier 8 Drawing
                    UIBezierPath bezier8Path = new UIBezierPath();
                    bezier8Path.MoveTo(new PointF(67.21f, 59.1f));
                    bezier8Path.AddLineTo(new PointF(56.61f, 69.13f));
                    bezier8Path.AddCurveToPoint(new PointF(54.65f, 81.94f), new PointF(58.6f, 73.59f), new PointF(58.08f, 79.16f));
                    bezier8Path.AddCurveToPoint(new PointF(40.65f, 84.17f), new PointF(51.21f, 85.28f), new PointF(45.85f, 85.84f));
                    bezier8Path.AddLineTo(new PointF(11.47f, 111.46f));
                    bezier8Path.AddLineTo(new PointF(41.56f, 139.87f));
                    bezier8Path.AddLineTo(new PointF(70.74f, 112.58f));
                    bezier8Path.AddCurveToPoint(new PointF(72.7f, 99.21f), new PointF(68.75f, 107.57f), new PointF(69.27f, 102.55f));
                    bezier8Path.AddCurveToPoint(new PointF(86.7f, 97.54f), new PointF(76.13f, 95.87f), new PointF(81.5f, 95.31f));
                    bezier8Path.AddLineTo(new PointF(97.3f, 87.51f));
                    bezier8Path.AddLineTo(new PointF(67.21f, 59.1f));
                    bezier8Path.ClosePath();
                    bezier8Path.MiterLimit = 4.0f;

                    SkDarkToolBox.ColorMainImage.SetFill();
                    bezier8Path.Fill();


                    //// Bezier 10 Drawing
                    UIBezierPath bezier10Path = new UIBezierPath();
                    bezier10Path.MoveTo(new PointF(85.26f, 75.82f));
                    bezier10Path.AddLineTo(new PointF(127.07f, 36.27f));
                    bezier10Path.AddLineTo(new PointF(133.08f, 42.39f));
                    bezier10Path.AddLineTo(new PointF(141.0f, 23.46f));
                    bezier10Path.AddLineTo(new PointF(134.98f, 17.33f));
                    bezier10Path.AddLineTo(new PointF(115.03f, 25.13f));
                    bezier10Path.AddLineTo(new PointF(121.05f, 30.7f));
                    bezier10Path.AddLineTo(new PointF(79.25f, 70.25f));
                    bezier10Path.AddLineTo(new PointF(85.26f, 75.82f));
                    bezier10Path.ClosePath();
                    bezier10Path.MiterLimit = 4.0f;

                    SkDarkToolBox.ColorImageBlade.SetFill();
                    bezier10Path.Fill();


                    //// Bezier 12 Drawing
                    UIBezierPath bezier12Path = new UIBezierPath();
                    bezier12Path.MoveTo(new PointF(23.51f, 123.16f));
                    bezier12Path.AddLineTo(new PointF(79.25f, 70.25f));
                    bezier12Path.AddLineTo(new PointF(67.21f, 59.1f));
                    bezier12Path.AddLineTo(new PointF(56.61f, 69.13f));
                    bezier12Path.AddCurveToPoint(new PointF(54.65f, 81.94f), new PointF(58.6f, 73.59f), new PointF(58.08f, 79.16f));
                    bezier12Path.AddCurveToPoint(new PointF(40.65f, 84.17f), new PointF(51.21f, 85.28f), new PointF(45.85f, 85.84f));
                    bezier12Path.AddLineTo(new PointF(11.47f, 111.46f));
                    bezier12Path.AddLineTo(new PointF(23.51f, 123.16f));
                    bezier12Path.ClosePath();
                    bezier12Path.MiterLimit = 4.0f;

                    SkDarkToolBox.StrokeBorder.SetFill();
                    bezier12Path.Fill();
                }


                context.EndTransparencyLayer();
                context.RestoreState();
            }
        }

        //// Generated Images

        public static UIImage ImageOfCanvas1(RectangleF frame, bool isTapped)
        {
            UIGraphics.BeginImageContextWithOptions(new SizeF(451.0f, 152.0f), false, 0);
            SkDarkToolBox.DrawCanvas1(frame, isTapped);
            var imageOfCanvas1 = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();

            return imageOfCanvas1;
        }

    }
}
