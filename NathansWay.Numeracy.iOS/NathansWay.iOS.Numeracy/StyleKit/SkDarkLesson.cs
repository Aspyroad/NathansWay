//
//  SkDarkLesson.cs
//  NathansWay.iOS.Numeracy.Graphics
//
//  Created by Brett Anthony on 13/10/2014.
//  Copyright (c) 2014 AspyRoad Software. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreGraphics;

namespace NathansWay.iOS.Numeracy.Graphics
{
    [Register ("SkDarkLesson")]
    public class SkDarkLesson : NSObject
    {

        //// Initialization

        static SkDarkLesson()
        {
            var colorSpace = CGColorSpace.CreateDeviceRGB();

            // Colors Initialization
            ColorTextGradient = UIColor.FromRGBA(1.000f, 1.000f, 1.000f, 0.780f);
            ColorGradientButtonMainStart = UIColor.FromRGBA(0.000f, 0.000f, 0.000f, 1.000f);
            ColorGradientButtonTap = SkDarkLesson.ColorGradientButtonMainStart.ColorWithAlpha(0.7f);
            ColorGradientButtonMainEnd = UIColor.FromRGBA(0.000f, 0.000f, 0.000f, 0.702f);
            StrokeBorder = UIColor.FromRGBA(0.574f, 0.346f, 0.093f, 0.829f);
            ColorMainImage = UIColor.FromRGBA(0.672f, 0.376f, 0.128f, 1.000f);

            // Gradients Initialization
            var gradientButtonMainColors = new CGColor [] {SkDarkLesson.ColorGradientButtonMainStart.CGColor, UIColor.FromRGBA(0.000f, 0.000f, 0.000f, 0.851f).CGColor, SkDarkLesson.ColorGradientButtonMainEnd.CGColor};
            var gradientButtonMainLocations = new float [] {0.27f, 0.51f, 0.95f};
            GradientButtonMain = new CGGradient(colorSpace, gradientButtonMainColors, gradientButtonMainLocations);

            // Shadows Initialization
            ShadowTextTitle = new NSShadow { ShadowColor = SkDarkLesson.ColorGradientButtonMainStart, ShadowOffset = new SizeF(2.1f, -3.1f), ShadowBlurRadius = 5.0f };

        }

        //// Colors

        public static UIColor ColorTextGradient { get; private set; }
        public static UIColor ColorGradientButtonMainStart { get; private set; }
        public static UIColor ColorGradientButtonMainEnd { get; private set; }
        public static UIColor StrokeBorder { get; private set; }
        public static UIColor ColorMainImage { get; private set; }
        public static UIColor ColorGradientButtonTap { get; private set; }

        //// Gradients

        public static CGGradient GradientButtonMain { get; private set; }

        //// Shadows

        public static NSShadow ShadowTextTitle { get; private set; }

        //// Drawing Methods

        public static void DrawCanvas1(RectangleF frame, bool isTapped)
        {
            //// General Declarations
            var colorSpace = CGColorSpace.CreateDeviceRGB();
            var context = UIGraphics.GetCurrentContext();


            //// Variable Declarations
            var colorWhenTapped = isTapped ? new CGGradient(colorSpace, new CGColor [] {SkDarkLesson.ColorGradientButtonMainEnd.CGColor, SkDarkLesson.ColorGradientButtonMainStart.CGColor}) : new CGGradient(colorSpace, new CGColor [] {SkDarkLesson.ColorGradientButtonMainStart.CGColor, SkDarkLesson.ColorGradientButtonMainEnd.CGColor});

            //// Rounded Rectangle 2 Drawing
            var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2.5f, 2.5f, 446.0f, 148.0f), 24.0f);
            UIColor.White.SetFill();
            roundedRectangle2Path.Fill();
            UIColor.White.SetStroke();
            roundedRectangle2Path.LineWidth = 1.0f;
            roundedRectangle2Path.Stroke();


            //// Rounded Rectangle Drawing
            var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(1.5f, 1.5f, 448.0f, 150.0f), 24.0f);
            context.SaveState();
            roundedRectanglePath.AddClip();
            context.DrawLinearGradient(colorWhenTapped,
                new PointF(211.74f, 157.42f),
                new PointF(225.5f, 1.5f),
                CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);
            context.RestoreState();


            //// Text Drawing
            RectangleF textRect = new RectangleF(145.0f, 0.0f, 112.0f, 64.0f);
            context.SaveState();
            context.SetShadowWithColor(SkDarkLesson.ShadowTextTitle.ShadowOffset, SkDarkLesson.ShadowTextTitle.ShadowBlurRadius, SkDarkLesson.ShadowTextTitle.ShadowColor.CGColor);
            SkDarkLesson.ColorTextGradient.SetFill();
            new NSString("Lesson").DrawString(RectangleF.Inflate(textRect, 0.0f, -7.0f), UIFont.FromName("GillSans-Light", 40.0f), UILineBreakMode.WordWrap, UITextAlignment.Center);
            context.RestoreState();



            //// Bezier 2 Drawing
            UIBezierPath bezier2Path = new UIBezierPath();
            bezier2Path.MoveTo(new PointF(127.74f, 44.78f));
            bezier2Path.AddCurveToPoint(new PointF(118.44f, 32.83f), new PointF(125.26f, 40.64f), new PointF(122.19f, 36.59f));
            bezier2Path.AddCurveToPoint(new PointF(106.38f, 23.42f), new PointF(114.65f, 29.03f), new PointF(110.56f, 25.92f));
            bezier2Path.AddLineTo(new PointF(113.73f, 16.0f));
            bezier2Path.AddCurveToPoint(new PointF(129.68f, 21.36f), new PointF(113.73f, 16.0f), new PointF(124.36f, 16.0f));
            bezier2Path.AddCurveToPoint(new PointF(135.0f, 37.45f), new PointF(135.0f, 26.73f), new PointF(135.0f, 37.45f));
            bezier2Path.AddLineTo(new PointF(127.74f, 44.78f));
            bezier2Path.ClosePath();
            bezier2Path.MoveTo(new PointF(65.86f, 107.18f));
            bezier2Path.AddLineTo(new PointF(44.59f, 107.18f));
            bezier2Path.AddLineTo(new PointF(44.59f, 85.73f));
            bezier2Path.AddLineTo(new PointF(47.14f, 83.15f));
            bezier2Path.AddCurveToPoint(new PointF(59.63f, 92.01f), new PointF(51.47f, 85.22f), new PointF(55.76f, 88.12f));
            bezier2Path.AddCurveToPoint(new PointF(68.42f, 104.61f), new PointF(63.5f, 95.92f), new PointF(66.37f, 100.25f));
            bezier2Path.AddLineTo(new PointF(65.86f, 107.18f));
            bezier2Path.ClosePath();
            bezier2Path.MoveTo(new PointF(121.6f, 50.97f));
            bezier2Path.AddLineTo(new PointF(74.55f, 98.41f));
            bezier2Path.AddCurveToPoint(new PointF(65.26f, 86.46f), new PointF(72.07f, 94.28f), new PointF(69.01f, 90.21f));
            bezier2Path.AddCurveToPoint(new PointF(53.19f, 77.05f), new PointF(61.47f, 82.65f), new PointF(57.38f, 79.55f));
            bezier2Path.AddLineTo(new PointF(100.33f, 29.52f));
            bezier2Path.AddCurveToPoint(new PointF(112.81f, 38.37f), new PointF(104.65f, 31.57f), new PointF(108.95f, 34.47f));
            bezier2Path.AddCurveToPoint(new PointF(121.6f, 50.97f), new PointF(116.69f, 42.28f), new PointF(119.56f, 46.61f));
            bezier2Path.ClosePath();
            bezier2Path.MoveTo(new PointF(33.95f, 32.09f));
            bezier2Path.AddLineTo(new PointF(33.95f, 117.91f));
            bezier2Path.AddLineTo(new PointF(119.05f, 117.91f));
            bezier2Path.AddLineTo(new PointF(119.05f, 80.36f));
            bezier2Path.AddLineTo(new PointF(135.0f, 64.07f));
            bezier2Path.AddLineTo(new PointF(135.0f, 123.27f));
            bezier2Path.AddCurveToPoint(new PointF(124.36f, 134.0f), new PointF(135.0f, 129.2f), new PointF(130.23f, 134.0f));
            bezier2Path.AddLineTo(new PointF(28.64f, 134.0f));
            bezier2Path.AddCurveToPoint(new PointF(18.0f, 123.27f), new PointF(22.77f, 134.0f), new PointF(18.0f, 129.2f));
            bezier2Path.AddLineTo(new PointF(18.0f, 26.73f));
            bezier2Path.AddCurveToPoint(new PointF(28.64f, 16.0f), new PointF(18.0f, 20.81f), new PointF(22.77f, 16.0f));
            bezier2Path.AddLineTo(new PointF(87.19f, 16.0f));
            bezier2Path.AddLineTo(new PointF(71.23f, 32.09f));
            bezier2Path.AddLineTo(new PointF(33.95f, 32.09f));
            bezier2Path.ClosePath();
            bezier2Path.MiterLimit = 4.0f;

            context.SaveState();
            context.SetShadowWithColor(SkDarkLesson.ShadowTextTitle.ShadowOffset, SkDarkLesson.ShadowTextTitle.ShadowBlurRadius, SkDarkLesson.ShadowTextTitle.ShadowColor.CGColor);
            SkDarkLesson.ColorMainImage.SetFill();
            bezier2Path.Fill();
            context.RestoreState();

            SkDarkLesson.StrokeBorder.SetStroke();
            bezier2Path.LineWidth = 1.0f;
            bezier2Path.Stroke();
        }

        //// Generated Images

        public static UIImage ImageOfCanvas1(RectangleF frame, bool isTapped)
        {
            UIGraphics.BeginImageContextWithOptions(new SizeF(451.0f, 152.0f), false, 0);
            SkDarkLesson.DrawCanvas1(frame, isTapped);
            var imageOfCanvas1 = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();

            return imageOfCanvas1;
        }

    }
}
